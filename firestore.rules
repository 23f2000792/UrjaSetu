rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to check user status and role
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isRole(role) {
      return isSignedIn() && getUserData().role == role;
    }
    
    // Admins can do anything. Use with caution in production.
    match /{path=**} {
      allow read, write: if isRole('admin');
    }

    // User profiles can be read by their owner and created on signup.
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow read, update: if isSignedIn() && isOwner(userId);
      allow delete: if false;
    }

    // Projects and Energy Credits are public to all signed-in users. Only sellers can create/update.
    match /projects/{projectId} {
      allow read: if isSignedIn();
      allow create: if isRole('seller') && request.resource.data.ownerId == request.auth.uid;
      allow update: if isRole('seller') && resource.data.ownerId == request.auth.uid;
      allow delete: if isRole('seller') && resource.data.ownerId == request.auth.uid;
    }
    match /energyCredits/{creditId} {
        allow read: if isSignedIn();
    }
    
    // Portfolio assets can only be accessed by their owner.
    match /portfolioAssets/{assetId} {
      // The assetId is composite: {userId}_{projectId}. We can check ownership.
      allow read, create, update, delete: if isSignedIn() && isOwner(assetId.split('_')[0]);
    }

    // Transactions can be created by any signed-in user, but only read by the owner.
    match /transactions/{transactionId} {
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow read: if isSignedIn() && isOwner(resource.data.userId);
    }

    // Disputes can be created by any signed-in user, but only read by the owner or an admin/seller.
    match /disputes/{disputeId} {
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow read: if isSignedIn() && (isOwner(resource.data.userId) || isRole('seller') || isRole('admin'));
      allow update: if isRole('admin') || isRole('seller');
    }

    // Documents can be created and read by their owner, or reviewed by an admin.
    match /documents/{documentId} {
      allow create, read: if isSignedIn() && isOwner(request.resource.data.ownerId) || isOwner(resource.data.ownerId);
      allow update: if isRole('admin');
    }

    // Proposals are public for reading. Only sellers can create them. Voting is handled by updating counts.
    match /proposals/{proposalId} {
      allow read: if isSignedIn();
      allow create: if isRole('seller') && isOwner(request.resource.data.proposerId);
      // Allow any signed-in user to vote (update vote counts)
      allow update: if isSignedIn();
    }
  }
}
