
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Function to get user role
    function getRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    
    function isSeller() {
        return isAuthenticated() && getRole(request.auth.uid) == 'seller';
    }

    function isAdmin() {
        return isAuthenticated() && getRole(request.auth.uid) == 'admin';
    }

    // Users Collection
    // - Anyone can create their own user document (on signup)
    // - Users can only read/update their own document
    // - Authenticated users can read public fields of other users (for leaderboards, etc.)
    match /users/{userId} {
      allow create: if isOwner(userId);
      allow read: if isAuthenticated();
      allow update: if isOwner(userId);
    }

    // Projects Collection
    // - Any authenticated user can read projects (marketplace)
    // - Only sellers can create new projects
    // - Only the owner of the project can update it (e.g. description)
    // - Transactions can update tokensAvailable (see transactions rules)
    match /projects/{projectId} {
      allow read: if isAuthenticated();
      allow create: if isSeller();
      allow update: if isOwner(resource.data.ownerId);
    }
    
    // Portfolio Assets Collection
    // - Users can only create, read, update, or delete their own portfolio assets
    match /portfolioAssets/{assetId} {
      allow read, update, delete: if isAuthenticated() && assetId.startsWith(request.auth.uid);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
    }
    
    // Transactions Collection
    // - Users can create their own transactions (e.g., buying tokens)
    // - Users can only read their own transactions
    match /transactions/{transactionId} {
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
        allow read: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Documents Collection (for KYC, etc.)
    // - Users can create (upload) their own documents
    // - Users can only read their own documents
    // - Admins can read all documents and update their status for review
    match /documents/{documentId} {
      allow create: if isAuthenticated() && isOwner(request.resource.data.ownerId);
      allow read: if isAuthenticated() && (isOwner(resource.data.ownerId) || isAdmin());
      allow update: if isAdmin();
    }
    
    // Disputes Collection
    // - Authenticated users can create their own disputes
    // - Users can only read their own disputes
    // - Admins and Sellers can read all disputes and update them
    match /disputes/{disputeId} {
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
        allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin() || isSeller());
        allow update: if isAdmin() || isSeller();
    }

    // Proposals Collection (Governance)
    // - Any authenticated user can read proposals
    // - Only sellers can create proposals
    // - Any authenticated user can vote (update vote counts)
    match /proposals/{proposalId} {
      allow read: if isAuthenticated();
      allow create: if isSeller();
      allow update: if isAuthenticated(); // Allows for voting
    }
    
     // Energy Credits Collection
    match /energyCredits/{creditId} {
      allow read: if isAuthenticated();
      // Add create/update rules if sellers/admins can create these later
    }
  }
}
