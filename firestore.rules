
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get user role
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can read user profiles (for leaderboard)
      allow read: if request.auth != null;
      // A user can only create or update their own profile
      allow create, update: if request.auth.uid == userId;
    }

    // Rules for the 'projects' collection
    match /projects/{projectId} {
      // Anyone can read project data for the marketplace
      allow read: if true;
      // Only authenticated sellers can create projects
      allow create: if request.auth != null && getUserRole(request.auth.uid) == 'seller';
      // Only the project owner can update their project. Also allow any authenticated user to update for purchases (token count).
      allow update: if request.auth != null && (resource.data.ownerId == request.auth.uid || request.auth != null);
      // Only the project owner can delete their project
      allow delete: if request.auth != null && resource.data.ownerId == request.auth.uid;
    }

    // Rules for the 'transactions' collection
    match /transactions/{transactionId} {
        // Any authenticated user can read for leaderboards/dashboards
        allow read: if request.auth != null;
        // Any authenticated user can create a transaction (buy)
        allow create: if request.auth != null;
    }

    // Rules for the 'energyCredits' collection
    match /energyCredits/{creditId} {
      allow read: if true;
      // Add create/update rules if sellers are allowed to create these
    }
    
    // Rules for the 'documents' collection
    match /documents/{documentId} {
        // Only owner can create/read. Admin role would need to be checked for review.
        allow read, create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
        // For now, let's assume an admin role will handle updates via a backend function
        // Or we can add a specific rule for an 'admin' role if defined in user profiles.
        allow update: if request.auth != null; // Simplistic rule for now
    }

    // Rules for the 'disputes' collection
    match /disputes/{disputeId} {
      // User can create a dispute for their own transaction
      allow create: if request.auth.uid == request.resource.data.userId;

      // Only the buyer who filed or the seller involved can read/update the dispute
      allow read, update: if request.auth.uid == resource.data.userId || request.auth.uid == resource.data.sellerId;
      
      // Messages subcollection within a dispute
      match /messages/{messageId} {
        // Only buyer or seller of the dispute can read messages
        allow read: if request.auth.uid == get(/databases/$(database)/documents/disputes/$(disputeId)).data.userId || request.auth.uid == get(/databases/$(database)/documents/disputes/$(disputeId)).data.sellerId;
        // Only buyer or seller of the dispute can create messages
        allow create: if request.auth.uid == get(/databases/$(database)/documents/disputes/$(disputeId)).data.userId || request.auth.uid == get(/databases/$(database)/documents/disputes/$(disputeId)).data.sellerId;
      }
    }
    
    // Rules for proposals
    match /proposals/{proposalId} {
        allow read: if true;
        allow create: if request.auth != null && getUserRole(request.auth.uid) == 'seller';
        // Allow anyone to vote (update), allow proposer to update status
        allow update: if request.auth != null;
    }

  }
}
