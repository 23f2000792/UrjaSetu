
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isCreatingOwnDoc() {
      return request.auth.uid == request.resource.data.userId;
    }

    // Collection: users
    // Stores user profile information and roles.
    match /users/{userId} {
      // Anyone can create their own user document (on signup).
      allow create: if isOwner(userId);
      // Anyone can read any user's profile (for leaderboards, etc.).
      allow read: if isSignedIn();
      // Users can only update their own profile.
      allow update: if isOwner(userId);
      // Users cannot delete their profiles through the app.
      allow delete: if false;
    }

    // Collection: projects
    // Stores solar project listings.
    match /projects/{projectId} {
      // Any authenticated user can read project listings for the marketplace.
      allow read: if isSignedIn();
      // Only users with the 'seller' role can create new projects.
      allow create: if isRole('seller');
      // Sellers can only update their own projects. Admins can update any.
      // Buyers can update 'tokensAvailable' during a transaction.
      allow update: if (isRole('seller') && resource.data.ownerId == request.auth.uid) || isRole('admin') 
                      || (request.resource.data.tokensAvailable == resource.data.tokensAvailable - request.resource.data.quantityToBuy);
      // Only sellers or admins can delete projects.
      allow delete: if (isRole('seller') && resource.data.ownerId == request.auth.uid) || isRole('admin');
    }

    // Collection: energyCredits
    // Stores energy credit listings.
    match /energyCredits/{creditId} {
      // Publicly readable for the marketplace.
      allow read: if isSignedIn();
      // Only admins or a future 'credit authority' role should create these.
      allow create: if isRole('admin');
      allow update, delete: if isRole('admin');
    }

    // Collection: portfolioAssets
    // Stores assets owned by each user.
    match /portfolioAssets/{assetId} {
      // Users can only access documents where the document ID starts with their UID.
      allow read, delete: if isSignedIn() && assetId.startsWith(request.auth.uid);
      // Users can only create or update their own portfolio assets.
      allow create, update: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    // Collection: transactions
    // Stores records of all buy/sell operations.
    match /transactions/{transactionId} {
      // Users can only read their own transactions.
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      // Users can create their own transaction documents.
      allow create: if isCreatingOwnDoc();
      // Transactions are immutable.
      allow update, delete: if false;
    }
    
    // Collection: disputes
    // For handling transaction issues.
    match /disputes/{disputeId} {
        // Users can create their own disputes.
        allow create: if isCreatingOwnDoc();
        // Users can read their own disputes. Admins/Sellers can read any.
        allow read: if (isSignedIn() && resource.data.userId == request.auth.uid) || isRole('admin') || isRole('seller');
        // Only Admins/Sellers can update dispute status.
        allow update: if isRole('admin') || isRole('seller');
        allow delete: if isRole('admin');
    }
    
    // Collection: documents
    // For KYC and project verification documents.
    match /documents/{documentId} {
        // Users can create their own documents.
        allow create: if resource.data.ownerId == request.auth.uid;
        // Users can read their own documents. Admins can read any.
        allow read: if (isSignedIn() && resource.data.ownerId == request.auth.uid) || isRole('admin');
        // Only Admins can update document status.
        allow update: if isRole('admin');
        allow delete: if isRole('admin');
    }
    
    // Collection: proposals
    // For governance voting.
    match /proposals/{proposalId} {
        // Any authenticated user can read proposals.
        allow read: if isSignedIn();
        // Only sellers can create proposals.
        allow create: if isRole('seller') && request.resource.data.proposerId == request.auth.uid;
        // Any authenticated user can vote (update vote counts).
        allow update: if isSignedIn();
        // Only Admins or the proposer can delete.
        allow delete: if isRole('admin') || (isRole('seller') && resource.data.proposerId == request.auth.uid);
    }
  }
}
