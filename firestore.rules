
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSignedIn() {
      return request.auth != null;
    }

    function isRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isProjectOwner(projectId) {
      return get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid;
    }

    match /users/{userId} {
      allow read: if isSignedIn();
      allow update: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn();
    }

    match /projects/{projectId} {
      allow read: if true;
      allow create: if isSignedIn() && isRole('seller') && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isRole('seller') && isProjectOwner(projectId);
      allow delete: if isSignedIn() && isRole('seller') && isProjectOwner(projectId);
    }

    match /energyCredits/{creditId} {
      allow read: if true;
    }

    match /transactions/{transactionId} {
      // Allow read if user is the buyer OR the seller involved in the transaction.
      // This is critical for the seller dashboard to get real-time sales updates.
      allow read: if isSignedIn() && 
                    (resource.data.userId == request.auth.uid || resource.data.sellerId == request.auth.uid);
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false; // Transactions should be immutable
    }

    match /documents/{documentId} {
      allow read: if isSignedIn() && (isRole('admin') || resource.data.ownerId == request.auth.uid);
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isRole('admin');
      allow delete: if isSignedIn() && isRole('admin');
    }

    match /proposals/{proposalId} {
        allow read: if true;
        allow create: if isSignedIn() && isRole('seller') && request.resource.data.proposerId == request.auth.uid;
        // Allow updates only for voting (for/against) or status changes by the proposer (if they are a seller)
        allow update: if isSignedIn() && 
          (
            ( request.resource.data.diff(resource.data).affectedKeys().hasOnly(['votesFor', 'votesAgainst'])) ||
            ( request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']) && resource.data.proposerId == request.auth.uid && isRole('seller') )
          );
    }

    match /disputes/{disputeId} {
      allow read: if isSignedIn() && (resource.data.userId == request.auth.uid || resource.data.sellerId == request.auth.uid || isRole('admin'));
      allow create: if isSignedIn() && isRole('buyer') && request.resource.data.userId == request.auth.uid;
      // Allow seller to update status, or buyer to update rating
      allow update: if isSignedIn() &&
                    (
                      (isRole('seller') && resource.data.sellerId == request.auth.uid && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status'])) ||
                      (isRole('buyer') && resource.data.userId == request.auth.uid && resource.data.status == 'Resolved' && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rating']))
                    );
      
      match /messages/{messageId} {
        allow read, create: if isSignedIn() && (get(/databases/$(database)/documents/disputes/$(disputeId)).data.userId == request.auth.uid || get(/databases/$(database)/documents/disputes/$(disputeId)).data.sellerId == request.auth.uid || isRole('admin'));
      }
    }
    
    match /notifications/{notificationId} {
        allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
        allow create: if true; // Allows backend or client to create notifications
    }
  }
}
