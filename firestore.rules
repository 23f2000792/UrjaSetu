
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isProjectOwner(projectId) {
        return get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid;
    }

    // USERS collection
    // Users can read their own profile.
    // Admins can read any user profile.
    // Users can create their own profile on signup.
    match /users/{userId} {
      allow read: if isSignedIn() && (isOwner(userId) || isRole('admin'));
      allow write: if isOwner(userId);
    }
    
    // PROJECTS collection
    // Any signed-in user can read projects (for marketplace).
    // Sellers can create projects.
    // Project owners can update specific fields.
    match /projects/{projectId} {
      allow read: if isSignedIn();

      // Sellers can create new projects.
      allow create: if isSignedIn() && isRole('seller')
                    && request.resource.data.ownerId == request.auth.uid
                    && request.resource.data.status == 'Pending';

      // An owner can update their own project's descriptive fields, price, and capacity.
      // Any authenticated user can update ONLY the tokensAvailable field during a transaction.
      allow update: if isSignedIn() && 
                    (
                      ( // Owner is editing fields
                        isOwner(resource.data.ownerId) &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly([
                          'name', 'location', 'panelType', 'description', 'imageUrl', 'tokenPrice', 'capacity'
                        ])
                      ) || 
                      ( // A buyer is purchasing tokens in a transaction
                        request.resource.data.tokensAvailable < resource.data.tokensAvailable &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['tokensAvailable'])
                      )
                    );
    }
    
    // ENERGY CREDITS collection
    // Anyone can read credits. Admin can write.
    match /energyCredits/{creditId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && isRole('admin');
    }
    
    // PORTFOLIO ASSETS collection
    // Users can only read and write to their own portfolio assets.
    match /portfolioAssets/{assetId} {
        allow read, write: if isSignedIn() && isOwner(resource.data.userId);
        allow create: if isSignedIn() && isOwner(request.resource.data.userId);
    }

    // TRANSACTIONS collection
    // Users can create their own transactions.
    // Users can only read their own transactions.
    match /transactions/{transactionId} {
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow read: if isSignedIn() && isOwner(resource.data.userId);
      allow write: if false; // Transactions should be immutable
    }

    // DISPUTES collection
    // Users can create their own disputes.
    // Users can read their own disputes. Admins can read all.
    match /disputes/{disputeId} {
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow read: if isSignedIn() && (isOwner(resource.data.userId) || isRole('admin'));
      allow update: if isSignedIn() && isRole('admin'); // Admins can update status
    }
    
    // GOVERNANCE PROPOSALS collection
    // Any signed-in user can read proposals.
    // Sellers can create proposals.
    // Voters can update vote counts (simplified for now).
    match /proposals/{proposalId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && isRole('seller') && isOwner(request.resource.data.proposerId);
      // Allow authenticated users to increment vote counts.
      allow update: if isSignedIn() && 
                    (
                      request.resource.data.votesFor == resource.data.votesFor + 1 ||
                      request.resource.data.votesAgainst == resource.data.votesAgainst + 1
                    );
    }
    
    // DOCUMENTS collection
    // Users can create (upload) their own documents.
    // Users can read their own documents.
    // Admins can read all documents and update their status.
    match /documents/{documentId} {
        allow create: if isSignedIn() && isOwner(request.resource.data.ownerId);
        allow read: if isSignedIn() && (isOwner(resource.data.ownerId) || isRole('admin'));
        allow update: if isSignedIn() && isRole('admin') && request.resource.data.keys().hasAny(['status']);
    }

    // NOTIFICATIONS collection
    // Users can only read their own notifications.
    // Notifications are created by backend logic/triggers, so client-side create is limited.
    match /notifications/{notificationId} {
      allow read: if isSignedIn() && isOwner(resource.data.userId);
      // Allow creation for real-time listener logic
      allow create: if isSignedIn();
      allow write: if false;
    }
  }
}
