rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // =================================
    // Users Collection
    // =================================
    match /users/{userId} {
      // Any authenticated user can read public profile data (for leaderboards, etc.)
      allow read: if request.auth != null;
      // A user can create their own user document on signup
      allow create: if request.auth.uid == userId;
      // A user can only update their own profile information
      allow update: if request.auth.uid == userId;
      // Disallow client-side deletion of user profiles
      allow delete: if false;
    }
    
    // =================================
    // Projects and Energy Credits (Marketplace)
    // =================================
    match /projects/{projectId} {
      // Anyone can view projects in the marketplace
      allow read: if request.auth != null;
      // Only users with the 'seller' role can create projects
      allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'seller';
      // Only the owner can update project details. The system updates token counts via transactions.
      allow update: if request.auth != null && resource.data.ownerId == request.auth.uid;
      // Deletion should be handled by admins, not allowed from client
      allow delete: if false;
    }
    
    match /energyCredits/{creditId} {
      // Anyone can view energy credits
      allow read: if request.auth != null;
      // Creating/updating credits is likely an admin/backend process
      allow create, update, delete: if false;
    }
    
    // =================================
    // Portfolio Assets
    // =================================
    match /portfolioAssets/{assetId} {
      // A user can only read their own portfolio assets. The assetId is structured as `userId_assetId`.
      allow read, delete: if request.auth != null && request.auth.uid == assetId.split('_')[0];
      // A user can only create or update their own portfolio assets
      allow write: if request.auth != null && request.auth.uid == assetId.split('_')[0];
    }
    
    // =================================
    // Transactions
    // =================================
    match /transactions/{transactionId} {
      // A user can read their own transactions. Admins/Sellers might need read access too.
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      // A user can only create transactions for themselves
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Transactions are immutable
      allow update, delete: if false;
    }

    // =================================
    // Disputes
    // =================================
    match /disputes/{disputeId} {
        // A user can read their own disputes. Sellers/Admins can read all.
        allow read: if request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' || resource.data.userId == request.auth.uid);
        // User can create a dispute for themselves
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        // Only admins should update dispute status
        allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        // Disallow client-side deletion
        allow delete: if false;
    }

    // =================================
    // Documents
    // =================================
    match /documents/{documentId} {
        // Owner can read their own documents, admins can read all
        allow read: if request.auth != null && (resource.data.ownerId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
        // Owner can create documents for themselves
        allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
        // Only admins can update status
        allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        // Disallow client-side deletion
        allow delete: if false;
    }

    // =================================
    // Governance Proposals
    // =================================
    match /proposals/{proposalId} {
        // Any authenticated user can read proposals for voting
        allow read: if request.auth != null;
        // Only sellers can create proposals
        allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'seller';
        // Users can vote (update vote counts), and the original proposer or an admin can't change core details after creation.
        allow update: if request.auth != null;
        // Disallow client-side deletion
        allow delete: if false;
    }
  }
}