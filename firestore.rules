rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function getRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isRole(role) {
      return isSignedIn() && getRole() == role;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isProjectOwner(projectId) {
      return isSignedIn() && get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid;
    }

    // Collection Rules
    match /users/{userId} {
      // Any signed-in user can read any user's profile (for leaderboards, etc.)
      allow read: if isSignedIn();
      // Only the owner can create or update their own user document.
      allow write: if isOwner(userId);
    }

    match /projects/{projectId} {
      // Any signed-in user can read project data for the marketplace.
      allow read: if isSignedIn();

      // Only a 'seller' can create a project.
      allow create: if isRole('seller') && request.resource.data.ownerId == request.auth.uid;

      // Only the project owner (a 'seller') can update project details.
      allow update: if isProjectOwner(projectId) && isRole('seller');
      
      // Allow a 'buyer' to update 'tokensAvailable' within a transaction.
      // This is the key rule for the purchase transaction.
      // This check is part of the transaction's write operations, not a standalone update.
      // The transaction as a whole will be allowed by rules on transaction/portfolio docs.
      // We also need a specific rule here.
      match /{document=**} {
        allow write: if isRole('buyer'); // Simplified for transaction
      }
    }

    match /energyCredits/{creditId} {
      // Any signed-in user can read energy credit data for the marketplace.
      allow read: if isSignedIn();
    }

    match /transactions/{transactionId} {
      // Any signed-in user can read transaction data for their own history.
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      // Any signed-in user can create a transaction (e.g., a purchase).
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    match /portfolioAssets/{assetId} {
        // A user can only read their own portfolio assets.
        allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
        // A user can only create or update their own portfolio assets.
        allow write: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    match /disputes/{disputeId} {
      // A user can read their own disputes. Admins can read all disputes.
      allow read: if isSignedIn() && (resource.data.userId == request.auth.uid || isRole('admin'));
      // A user can create their own dispute. Admins can update any dispute.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isRole('admin');
    }

    match /documents/{documentId} {
      // The owner or an admin can read the document.
      allow read: if isSignedIn() && (resource.data.ownerId == request.auth.uid || isRole('admin'));
      // Only the owner can create their document.
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      // Only an admin can update (approve/reject) a document.
      allow update: if isRole('admin');
    }
    
    match /proposals/{proposalId} {
      // Any signed-in user can read proposals for governance.
      allow read: if isSignedIn();
      // Only a 'seller' can create a proposal.
      allow create: if isRole('seller') && request.resource.data.proposerId == request.auth.uid;
      // Any signed-in user can update (vote on) a proposal.
      allow update: if isSignedIn();
    }
    
    match /notifications/{notificationId} {
        // A user can only read or write their own notifications.
        allow read, write: if isSignedIn() && resource.data.userId == request.auth.uid;
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }
  }
}
