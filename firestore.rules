
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // USERS: Users can read their own profile, admins can read any. Users can only create their own profile.
    match /users/{userId} {
      allow read: if isSignedIn() && (isOwner(userId) || isRole('admin'));
      allow write: if isSignedIn() && isOwner(userId);
    }
    
    // PROJECTS: All signed-in users can read. Only sellers can create. Only project owner can update/delete.
    // Buyers can update 'tokensAvailable' during a transaction.
    match /projects/{projectId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && isRole('seller') && request.resource.data.ownerId == request.auth.uid;
      
      // Allow a buyer to update ONLY the tokensAvailable field, and only to decrement it.
      // Allow the owner to update any field they are allowed to.
      allow update: if isSignedIn() && 
                      (
                        ( // Buyer transaction logic
                          isRole('buyer') &&
                          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['tokensAvailable']) &&
                          request.resource.data.tokensAvailable < resource.data.tokensAvailable
                        ) ||
                        ( // Owner update logic
                          isRole('seller') && resource.data.ownerId == request.auth.uid
                        )
                      );
                      
      allow delete: if isSignedIn() && isRole('seller') && resource.data.ownerId == request.auth.uid;
    }

    // ENERGY CREDITS: Same as projects, but might have different logic in future.
    match /energyCredits/{creditId} {
      allow read: if isSignedIn();
      // Add create/update/delete rules as needed for credits.
    }
    
    // PORTFOLIO ASSETS: Users can only read/write their own portfolio assets.
    match /portfolioAssets/{assetId} {
        allow read, write: if isSignedIn() && isOwner(resource.data.userId);
        allow create: if isSignedIn() && isOwner(request.resource.data.userId);
    }
    
    // TRANSACTIONS: Users can only create their own transactions. Users can only read their own transactions.
    match /transactions/{transactionId} {
      allow read: if isSignedIn() && (isOwner(resource.data.userId) || isRole('admin'));
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      // No updates or deletes allowed for transaction records for integrity.
      allow update, delete: if false;
    }

    // DISPUTES: Users can create/read their own. Admins can read all.
    match /disputes/{disputeId} {
      allow read: if isSignedIn() && (isOwner(resource.data.userId) || isRole('admin') || (isRole('seller') && resource.data.sellerId == request.auth.uid));
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow update: if isSignedIn() && (isRole('admin') || (isRole('seller') && resource.data.sellerId == request.auth.uid));
    }
    
    // PROPOSALS: Any signed-in user can read. Sellers can create their own.
    match /proposals/{proposalId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && isRole('seller') && isOwner(request.resource.data.proposerId);
      // Allow voting (update) by any signed in user, but only on vote fields.
      allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasAny(['votesFor', 'votesAgainst']);
    }

    // DOCUMENTS: Owners can create/read their own docs. Admins can read/update all.
    match /documents/{documentId} {
      allow read: if isSignedIn() && (isOwner(resource.data.ownerId) || isRole('admin'));
      allow create: if isSignedIn() && isOwner(request.resource.data.ownerId);
      allow update: if isSignedIn() && isRole('admin');
    }
    
    // NOTIFICATIONS: Users can only manage their own notifications
    match /notifications/{notificationId} {
        allow read, write: if isSignedIn() && isOwner(resource.data.userId);
        allow create: if isSignedIn() && isOwner(request.resource.data.userId);
    }
  }
}

    