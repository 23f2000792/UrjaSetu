
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the resource
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check for a specific role
    function hasRole(role) {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    // Users Collection
    match /users/{userId} {
      allow create: if request.auth.uid == userId; // Allow user to create their own profile
      allow read: if isAuthenticated(); // Allow any authenticated user to read profiles (for leaderboards, etc.)
      allow write: if isOwner(userId); // Allow user to update their own profile
    }

    // Projects Collection
    match /projects/{projectId} {
      allow read: if isAuthenticated(); // Allow any authenticated user to see project listings
      allow create: if hasRole('seller'); // Only sellers can create projects
      allow update: if hasRole('seller') && resource.data.ownerId == request.auth.uid; // Only the owner can update their project
      // Add 'delete' rule if needed
    }
    
    // Energy Credits Collection
    match /energyCredits/{creditId} {
        allow read: if isAuthenticated();
        allow create: if hasRole('seller');
        allow update: if hasRole('seller') && resource.data.ownerId == request.auth.uid;
    }

    // Transactions Collection
    match /transactions/{transactionId} {
      // Users can create their own transactions, and read them for history/reporting.
      allow create, read: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      // No updates or deletes allowed for transaction records to maintain integrity
    }
    
    // Portfolio Assets Collection
    match /portfolioAssets/{assetId} {
        // Users can only interact with their own portfolio assets.
        // The assetId is expected to be in the format `userId_marketAssetId`
        allow read, create, update, delete: if isAuthenticated() && isOwner(assetId.split('_')[0]);
    }
    
    // Disputes Collection
    match /disputes/{disputeId} {
        // Any user can create a dispute for themselves.
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
        // Users can read their own disputes. Admins can read all disputes.
        allow read: if (isAuthenticated() && isOwner(resource.data.userId)) || hasRole('admin');
        // Admins can update the status of any dispute.
        allow update: if hasRole('admin');
    }
    
    // Documents Collection
    match /documents/{documentId} {
        // Any user can upload a document for themselves.
        allow create: if isAuthenticated() && request.resource.data.ownerId == request.auth.uid;
        // Users can read their own documents. Admins can read all documents for review.
        allow read: if (isAuthenticated() && isOwner(resource.data.ownerId)) || hasRole('admin');
        // Admins can update the status of any document.
        allow update: if hasRole('admin');
    }
    
    // Governance Proposals Collection
    match /proposals/{proposalId} {
        allow read: if isAuthenticated(); // All authenticated users can read proposals
        // More complex write rules would go here (e.g., only DAO members can create)
    }
  }
}
