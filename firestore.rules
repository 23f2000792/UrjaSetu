rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get user role
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    
    // Helper function to check if user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Users: Can read all profiles (for leaderboards), but only write to their own.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      allow delete: if false; // Nobody can delete user profile docs
    }

    // Projects: Anyone can read. Only sellers can create. Only project owners or admins can update.
    match /projects/{projectId} {
      allow read: if true;
      allow create: if isSignedIn() && getUserRole(request.auth.uid) == 'seller';
      allow update: if isSignedIn() && (
                      (getUserRole(request.auth.uid) == 'seller' && resource.data.ownerId == request.auth.uid) ||
                      getUserRole(request.auth.uid) == 'admin'
                    );
      allow delete: if false; // Deletion should be a soft delete via status update
    }

    // Energy Credits: Anyone can read. Only admins can create/update.
    match /energyCredits/{creditId} {
        allow read: if true;
        allow create, update: if isSignedIn() && getUserRole(request.auth.uid) == 'admin';
        allow delete: if false;
    }
    
    // Transactions: Users can create their own transactions. Users can only read their own transactions. Admins can read all.
    match /transactions/{transactionId} {
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow read: if isSignedIn() && 
                    (resource.data.userId == request.auth.uid || getUserRole(request.auth.uid) == 'admin');
        allow update, delete: if false; // Transactions are immutable
    }
    
    // Portfolio Assets: Users can only read and write to their own portfolio.
    match /portfolioAssets/{assetId} {
        allow read, create, update: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        // The assetId is composite `userId_assetId`, so we check the start
        allow list: if isSignedIn() && string(request.query.get("where")[2]).startsWith(request.auth.uid);
        allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // Disputes: Users can create disputes for themselves. They can read their own disputes. Sellers/Admins can read all disputes.
    match /disputes/{disputeId} {
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow read: if isSignedIn() && 
                    (resource.data.userId == request.auth.uid || 
                     getUserRole(request.auth.uid) == 'seller' || 
                     getUserRole(request.auth.uid) == 'admin');
        allow update: if isSignedIn() && (getUserRole(request.auth.uid) == 'admin');
    }

    // Documents: Sellers can create documents for themselves. Only admins can read/update them.
    match /documents/{documentId} {
        allow create: if isSignedIn() && getUserRole(request.auth.uid) == 'seller' && request.resource.data.ownerId == request.auth.uid;
        allow read, update: if isSignedIn() && getUserRole(request.auth.uid) == 'admin';
        allow delete: if false;
    }
    
    // Proposals: Anyone can read. Only sellers can create. Only admins can update status.
    match /proposals/{proposalId} {
      allow read: if true;
      allow create: if isSignedIn() && getUserRole(request.auth.uid) == 'seller' && request.resource.data.proposerId == request.auth.uid;
      // Allow anyone to update votes (increment). Admins can update status.
      allow update: if isSignedIn() && (
                      (request.resource.data.votesFor == resource.data.votesFor + 1 || 
                       request.resource.data.votesAgainst == resource.data.votesAgainst + 1) ||
                      (getUserRole(request.auth.uid) == 'admin')
                    );
      allow delete: if false;
    }
  }
}