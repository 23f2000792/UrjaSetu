rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions for common checks
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isRole(role) {
      return isSignedIn() && getRole() == role;
    }

    // USERS Collection
    // Users can read their own profile.
    // Users can create their own profile upon signup.
    // Users can update their own profile.
    // Public profiles (for leaderboards) can be read by any signed-in user.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false;
    }

    // PROJECTS Collection
    // Anyone can read project listings for the marketplace.
    // Only sellers can create new projects.
    // Only the owner seller can update their project (except for tokensAvailable).
    // A buyer can update tokensAvailable during a transaction.
    match /projects/{projectId} {
      allow read: if isSignedIn();
      allow create: if isRole('seller') && request.resource.data.ownerId == request.auth.uid;
      
      // Allow a buyer to decrement tokensAvailable, but nothing else.
      allow update: if isRole('buyer') 
                      && request.resource.data.tokensAvailable == resource.data.tokensAvailable - request.resource.data.quantity
                      && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['tokensAvailable']);
                      
      // Allow the owner seller to update their project details.
      allow update: if isRole('seller') && resource.data.ownerId == request.auth.uid;
      
      allow delete: if isRole('admin');
    }

    // ENERGY CREDITS Collection (Similar to Projects)
    match /energyCredits/{creditId} {
      allow read: if isSignedIn();
      allow create: if isRole('seller');
      allow update: if isRole('buyer') || (isRole('seller') && resource.data.ownerId == request.auth.uid);
      allow delete: if isRole('admin');
    }

    // PORTFOLIO ASSETS Collection
    // Users can only read, create, update, and delete their own portfolio assets.
    match /portfolioAssets/{assetId} {
      allow read, write: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    // TRANSACTIONS Collection
    // Users can create their own transaction records.
    // Users can only read their own transaction records.
    match /transactions/{transactionId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false; // Transactions are immutable.
    }
    
    // DISPUTES Collection
    // Users/Sellers can create their own disputes.
    // Admins can read/update all disputes.
    // The user who filed the dispute can read it.
    match /disputes/{disputeId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow read: if isRole('admin') || (isSignedIn() && resource.data.userId == request.auth.uid);
      allow update: if isRole('admin');
      allow delete: if isRole('admin');
    }

    // DOCUMENTS Collection
    // Sellers can create (upload) their own documents.
    // Sellers can read their own documents.
    // Admins can read and update (approve/reject) all documents.
    match /documents/{documentId} {
        allow create: if isRole('seller') && request.resource.data.ownerId == request.auth.uid;
        allow read: if isRole('admin') || (isRole('seller') && resource.data.ownerId == request.auth.uid);
        allow update: if isRole('admin');
        allow delete: if isRole('admin');
    }
    
    // PROPOSALS Collection
    // Anyone authenticated can read proposals for voting.
    // Only sellers can create proposals.
    // Anyone can update (vote on) a proposal.
    match /proposals/{proposalId} {
        allow read: if isSignedIn();
        allow create: if isRole('seller') && request.resource.data.proposerId == request.auth.uid;
        allow update: if isSignedIn(); // Allow voting
        allow delete: if isRole('admin') || (isRole('seller') && resource.data.proposerId == request.auth.uid);
    }
  }
}
