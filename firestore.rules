rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users: Users can read their own profile. They can only create their own user document.
    match /users/{userId} {
      allow read, create: if request.auth.uid == userId;
    }

    // Projects: Anyone can read project listings. Only the project owner can create, update, or delete their own projects.
    match /projects/{projectId} {
      allow read;
      allow create: if request.auth.uid == request.resource.data.ownerId;
      allow update, delete: if request.auth.uid == resource.data.ownerId;
    }

    // Energy Credits: Anyone can read energy credit listings.
    match /energyCredits/{creditId} {
      allow read;
    }
    
    // Transactions: Authenticated users can create transactions. A user can read a transaction if they are the buyer OR the seller.
    match /transactions/{transactionId} {
      allow create: if request.auth != null;
      allow read: if request.auth.uid == resource.data.userId || request.auth.uid == resource.data.sellerId;
    }

    // Notifications: Users can only read their own notifications. Backend functions would write to this.
    match /notifications/{notificationId} {
        allow read: if request.auth.uid == resource.data.userId;
        allow create: if request.auth != null; // Simplified for client-side creation
    }

    // Documents: Users can create/read their own documents. Admins would need backend access to review.
    match /documents/{documentId} {
      allow create, read: if request.auth.uid == resource.data.ownerId;
      // Admin update via backend function
      allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Proposals: Authenticated users can create proposals. Anyone can read. Updates are restricted.
    match /proposals/{proposalId} {
      allow read;
      allow create: if request.auth.uid == request.resource.data.proposerId;
      // Let users vote (update votes) and sellers update status
      allow update: if request.auth != null;
    }

    // Disputes:
    // Users can create disputes.
    // Buyer, Seller, or Admin can read the dispute.
    // Buyer can update with a rating if it's 'Resolved'. Seller/Admin can update status.
    match /disputes/{disputeId} {
      allow create: if request.auth.uid == request.resource.data.userId;
      
      allow read: if request.auth.uid == resource.data.userId 
                  || request.auth.uid == resource.data.sellerId
                  || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

      allow update: if (request.auth.uid == resource.data.userId && request.resource.data.rating != resource.data.rating && resource.data.status == 'Resolved') || // Buyer can rate
                       (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['seller', 'admin']); // Seller/admin can update status etc.

      // Messages subcollection
      match /messages/{messageId} {
        allow read, create: if request.auth.uid == get(/databases/$(database)/documents/disputes/$(disputeId)).data.userId || 
                               request.auth.uid == get(/databases/$(database)/documents/disputes/$(disputeId)).data.sellerId ||
                               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
    }
  }
}
