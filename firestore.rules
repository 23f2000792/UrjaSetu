
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isSignedIn() {
      return request.auth != null;
    }

    // Users Collection
    match /users/{userId} {
      // Any signed-in user can create their own user profile document.
      allow create: if isSignedIn() && isOwner(userId);
      // Users can only read their own profile.
      allow read: if isSignedIn() && isOwner(userId);
      // Users can only update their own profile.
      allow update: if isSignedIn() && isOwner(userId);
      // Deletion of user profiles is not allowed through the client SDK.
      allow delete: if false;
    }

    // Projects Collection
    match /projects/{projectId} {
      // Any signed-in user can read project listings.
      allow read: if isSignedIn();
      // Only signed-in users with a 'seller' role can create projects.
      allow create: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'seller';
      // Only the owner of the project can update it.
      allow update: if isSignedIn() && request.auth.uid == resource.data.ownerId;
      // Only the owner can delete their project.
      allow delete: if isSignedIn() && request.auth.uid == resource.data.ownerId;
    }

    // Energy Credits Collection
    match /energyCredits/{creditId} {
      // Any signed-in user can read energy credit listings.
      allow read: if isSignedIn();
      // Creating, updating, deleting credits should be an admin/backend function.
      allow create, update, delete: if false; 
    }

    // Transactions Collection
    match /transactions/{transactionId} {
      // A user can read a transaction if they are the buyer or the seller.
      allow read: if isSignedIn() && (request.auth.uid == resource.data.userId || request.auth.uid == resource.data.sellerId);
      // A user can create a transaction for themselves.
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      // Transactions should not be updatable or deletable from the client to preserve history.
      allow update, delete: if false;
    }

    // Documents Collection
    match /documents/{documentId} {
      allow read: if isSignedIn() && (isOwner(resource.data.ownerId) || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow create: if isSignedIn() && isOwner(request.resource.data.ownerId);
      allow update: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow delete: if false;
    }
    
    // Disputes Collection
    match /disputes/{disputeId} {
       // User can read a dispute if they are the buyer or the seller involved.
      allow read: if isSignedIn() && (request.auth.uid == resource.data.userId || request.auth.uid == resource.data.sellerId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      // A buyer can create a dispute for themselves.
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      // Seller can update status, buyer can update rating
      allow update: if isSignedIn() && 
                    ( (request.auth.uid == resource.data.sellerId && request.resource.data.status != resource.data.status) ||
                      (isOwner(resource.data.userId) && resource.data.status == 'Resolved' && request.resource.data.rating != resource.data.rating) );

      // Messages sub-collection in a dispute
      match /messages/{messageId} {
        // Can read/write messages if you are the buyer or seller of the parent dispute.
        allow read, create: if isSignedIn() && (request.auth.uid == get(/databases/$(database)/documents/disputes/$(disputeId)).data.userId || request.auth.uid == get(/databases/$(database)/documents/disputes/$(disputeId)).data.sellerId);
      }
    }

    // Governance Proposals
    match /proposals/{proposalId} {
        // Any signed-in user can read proposals.
        allow read: if isSignedIn();
        // Only sellers can create proposals.
        allow create: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'seller';
        // Proposer can update status; anyone can update votes.
        allow update: if isSignedIn() && 
                    ( (request.auth.uid == resource.data.proposerId && request.resource.data.status != resource.data.status) || 
                      (request.resource.data.votesFor != resource.data.votesFor || request.resource.data.votesAgainst != resource.data.votesAgainst) );
    }

    // Notifications Collection
    match /notifications/{notificationId} {
      allow read, delete: if isSignedIn() && isOwner(resource.data.userId);
      // Allow users to create notifications for themselves or for another user (e.g. seller)
      allow create: if isSignedIn() && (isOwner(request.resource.data.userId) || request.auth.uid == get(/databases/$(database)/documents/disputes/$(request.resource.data.disputeId)).data.userId);
    }
  }
}
