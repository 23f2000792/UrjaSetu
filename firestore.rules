
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to get the role of the currently authenticated user
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    
    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // users/{userId}
    match /users/{userId} {
      // ANY authenticated user can read public profile data (for leaderboards, etc.)
      allow read: if isAuthenticated();
      // Users can only create their own user document (on signup)
      allow create: if isOwner(userId);
      // Users can only update their own profile
      allow update: if isOwner(userId);
      // No one can delete a user profile through the client
      allow delete: if false;
    }
    
    // projects/{projectId}
    match /projects/{projectId} {
      // ANY authenticated user can read project details for the marketplace
      allow read: if isAuthenticated();
      // ONLY 'seller' role can create new projects
      allow create: if getUserRole(request.auth.uid) == 'seller'
                    && request.resource.data.ownerId == request.auth.uid
                    && request.resource.data.status == 'Pending';
      // ONLY the 'admin' can update a project to verify/reject it.
      // A 'buyer' can ONLY update 'tokensAvailable' during a transaction.
      allow update: if getUserRole(request.auth.uid) == 'admin' || 
                       (isAuthenticated() && request.resource.data.tokensAvailable < resource.data.tokensAvailable);
      // No one can delete projects from the client
      allow delete: if false;
    }
    
    // energyCredits/{creditId}
    match /energyCredits/{creditId} {
      // ANY authenticated user can read credit details for the marketplace
      allow read: if isAuthenticated();
      // Write access for credits would typically be managed by a trusted backend/admin
      allow write: if getUserRole(request.auth.uid) == 'admin';
    }

    // portfolioAssets/{assetId} where assetId is `userId_projectId`
    match /portfolioAssets/{assetId} {
      // Users can only read their own portfolio assets
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      // Users can create/update their own portfolio assets
      allow write: if isAuthenticated() && isOwner(request.resource.data.userId);
      // No one can delete portfolio assets directly (should be handled by selling all assets)
      allow delete: if false;
    }

    // transactions/{transactionId}
    match /transactions/{transactionId} {
      // Users can read their own transactions
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      // Users can create their own transaction documents
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      // Transactions are immutable
      allow update, delete: if false;
    }

    // disputes/{disputeId}
    match /disputes/{disputeId} {
      // Users can read their own disputes. Admin can read all disputes.
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || getUserRole(request.auth.uid) == 'admin');
      // Users can create their own dispute documents
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      // Only admins can update the status of a dispute
      allow update: if getUserRole(request.auth.uid) == 'admin';
      // No one can delete disputes from the client
      allow delete: if false;
    }
    
    // documents/{documentId}
    match /documents/{documentId} {
      // Users can read their own documents. Admins can read all.
      allow read: if isAuthenticated() && (isOwner(resource.data.ownerId) || getUserRole(request.auth.uid) == 'admin');
      // Users can create their own documents
      allow create: if isAuthenticated() && isOwner(request.resource.data.ownerId);
      // Only admins can update the status of a document
      allow update: if getUserRole(request.auth.uid) == 'admin';
       // No one can delete documents from the client
      allow delete: if false;
    }
    
    // proposals/{proposalId}
    match /proposals/{proposalId} {
      // ANY authenticated user can read proposals for voting
      allow read: if isAuthenticated();
      // ONLY sellers can create proposals
      allow create: if getUserRole(request.auth.uid) == 'seller' 
                    && isOwner(request.resource.data.proposerId);
      // ANY authenticated user can update vote counts, but not other fields
      allow update: if isAuthenticated() &&
                      (request.resource.data.votesFor == resource.data.votesFor + 1 ||
                       request.resource.data.votesAgainst == resource.data.votesAgainst + 1) &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['votesFor', 'votesAgainst']);
      // No one can delete proposals from the client
      allow delete: if false;
    }
  }
}

    