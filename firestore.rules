rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions for clarity and reusability
    function isSignedIn() {
      return request.auth != null;
    }

    function isRole(role) {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isProjectOwner(projectId) {
      let projectData = get(/databases/$(database)/documents/projects/$(projectId)).data;
      return isSignedIn() && projectData.ownerId == request.auth.uid;
    }
    
    // Users can be read by any signed-in user (for profiles, leaderboards).
    // Users can only update their own profile.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow update: if isOwner(userId);
      allow create: if isSignedIn();
    }

    // Projects can be read by anyone.
    // Sellers can create projects.
    // Project owners can update their own projects.
    // Buyers can update a project ONLY to decrement the tokensAvailable field during a transaction.
    match /projects/{projectId} {
      allow read;
      allow create: if isRole('seller') && request.resource.data.ownerId == request.auth.uid;
      allow update: if (isRole('seller') && isProjectOwner(projectId)) || 
                      (isRole('buyer') && 
                       request.resource.data.tokensAvailable < resource.data.tokensAvailable &&
                       request.resource.data.diff(resource.data).changedKeys().hasOnly(['tokensAvailable']));
      allow delete: if isRole('seller') && isProjectOwner(projectId);
    }
    
    // Energy credits are read-only for all users.
    match /energyCredits/{creditId} {
        allow read;
        allow write: if false; // Managed by admin
    }

    // Users can create and read their own portfolio assets.
    // Updates are allowed to reflect new purchases.
    match /portfolioAssets/{portfolioAssetId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create, update: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow delete: if false;
    }

    // Users can create their own transactions and read them.
    // Transactions are immutable once created.
    match /transactions/{transactionId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }

    // Users can create and read their own disputes.
    // Admin can read all disputes for review.
    match /disputes/{disputeId} {
      allow read: if (isSignedIn() && resource.data.userId == request.auth.uid) || isRole('admin') || (isRole('seller'));
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isRole('admin'); // Admin can update status
    }

    // Sellers can create proposals.
    // All signed-in users can read proposals.
    // Voting is allowed by updating only votesFor or votesAgainst.
    match /proposals/{proposalId} {
      allow read: if isSignedIn();
      allow create: if isRole('seller') && request.resource.data.proposerId == request.auth.uid;
      allow update: if isSignedIn() && 
                       (request.resource.data.diff(resource.data).changedKeys().hasOnly(['votesFor']) ||
                        request.resource.data.diff(resource.data).changedKeys().hasOnly(['votesAgainst']));
    }

    // Sellers can create and read their own documents.
    // Admins can read and update (approve/reject) all documents.
    match /documents/{documentId} {
      allow read: if (isSignedIn() && resource.data.ownerId == request.auth.uid) || isRole('admin');
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isRole('admin');
    }
    
    // All signed-in users can read their own notifications.
    match /notifications/{notificationId} {
        allow read, write: if isSignedIn() && (isOwner(resource.data.userId) || isOwner(request.resource.data.userId));
    }
  }
}