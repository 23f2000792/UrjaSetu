
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    function isProjectOwner(projectId) {
      return get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid;
    }

    // USER PROFILES
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isOwner(userId);
    }
    
    // PROJECTS & ENERGY CREDITS (MARKETPLACE)
    match /projects/{projectId} {
      allow read: if true;
      allow create: if isSignedIn() && isRole('seller');

      // Seller can update their own project
      // Buyer can ONLY update tokensAvailable and it must be a decrement
      allow update: if (isSignedIn() && isRole('seller') && isProjectOwner(projectId)) ||
                    (isSignedIn() && isRole('buyer') && 
                      request.resource.data.tokensAvailable < resource.data.tokensAvailable &&
                      request.resource.data.diff(resource.data).changedKeys().hasOnly(['tokensAvailable']));

      allow delete: if isSignedIn() && isRole('seller') && isProjectOwner(projectId);
    }
    
    match /energyCredits/{creditId} {
      allow read: if true;
    }
    
    // PORTFOLIO ASSETS
    match /portfolioAssets/{portfolioAssetId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create, update: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow delete: if false; // Assets should be sold, not deleted
    }
    
    // TRANSACTIONS
    match /transactions/{transactionId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false; // Transactions are immutable
    }

    // DOCUMENTS
    match /documents/{documentId} {
        allow read, write: if isSignedIn(); // Simplified for now
    }
    
    // GOVERNANCE PROPOSALS
    match /proposals/{proposalId} {
        allow read: if true;
        allow create: if isSignedIn() && (isRole('seller') || isRole('admin'));
        // Allow anyone to vote (update vote counts), and owner to update status
        allow update: if isSignedIn() && (
                        (request.resource.data.diff(resource.data).changedKeys().hasOnly(['votesFor', 'votesAgainst'])) ||
                        (isProjectOwner(resource.data.proposerId) && request.resource.data.diff(resource.data).changedKeys().hasOnly(['status']))
                      );
    }

    // NOTIFICATIONS
    match /notifications/{notificationId} {
      allow read, write: if isSignedIn() && isOwner(resource.data.userId);
    }
    
    // DISPUTES
    match /disputes/{disputeId} {
      // Only the buyer who filed it or the seller it's against can read it.
      allow read, update: if isSignedIn() && (resource.data.userId == request.auth.uid || resource.data.sellerId == request.auth.uid);
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;

      // DISPUTE MESSAGES SUBCOLLECTION
      match /messages/{messageId} {
        // Only participants of the parent dispute can read/write messages
        allow read, create: if isSignedIn() && (get(/databases/$(database)/documents/disputes/$(disputeId)).data.userId == request.auth.uid || get(/databases/$(database)/documents/disputes/$(disputeId)).data.sellerId == request.auth.uid);
      }
    }
  }
}

    