rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to make rules more readable and reusable
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    // --- Users Collection ---
    // Users can read public profiles (for leaderboards, etc.)
    // Users can only create and update their own profile.
    match /users/{userId} {
      allow read: if isAuth();
      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isOwner(userId);
      allow delete: if false; // Do not allow users to delete their own accounts through client
    }

    // --- Projects Collection ---
    // Anyone can read projects for the marketplace.
    // Only sellers can create projects.
    // Sellers can only update their own projects.
    // Buyers can update a project ONLY to decrement tokensAvailable during a transaction.
    match /projects/{projectId} {
      allow read: if true;
      allow create: if isRole('seller') && isOwner(request.resource.data.ownerId);
      allow update: if (isRole('seller') && isOwner(resource.data.ownerId)) || 
                     (isAuth() && request.resource.data.tokensAvailable == resource.data.tokensAvailable - request.resource.data.quantityToBuy);
      allow delete: if isRole('seller') && isOwner(resource.data.ownerId);
    }
    
    // --- Energy Credits Collection ---
    // Similar to projects, but simplified as they are not created by sellers in the app.
    match /energyCredits/{creditId} {
        allow read: if true;
        allow create, delete: if isRole('admin'); // Only admins can add/remove credits
        allow update: if isRole('admin') || 
                       (isAuth() && request.resource.data.amount == resource.data.amount - request.resource.data.quantityToBuy);
    }

    // --- Portfolio Assets Collection ---
    // Users can only read, create, update, and delete their own portfolio assets.
    match /portfolioAssets/{assetId} {
        allow read, update, delete: if isAuth() && isOwner(resource.data.userId);
        allow create: if isAuth() && isOwner(request.resource.data.userId);
    }

    // --- Transactions Collection ---
    // Users can read their own transactions.
    // Users can create their own transaction documents.
    match /transactions/{transactionId} {
        allow read: if isAuth() && isOwner(resource.data.userId);
        allow create: if isAuth() && isOwner(request.resource.data.userId);
        allow update, delete: if false; // Transactions are immutable
    }

    // --- Disputes Collection ---
    // Users can create their own disputes.
    // Users can read their own disputes. Admins/Sellers can read all for review.
    match /disputes/{disputeId} {
        allow create: if isAuth() && isOwner(request.resource.data.userId);
        allow read: if isAuth() && (isOwner(resource.data.userId) || isRole('admin') || isRole('seller'));
        allow update: if isAuth() && (isRole('admin') || isRole('seller')); // Admins/Sellers can update status
        allow delete: if isRole('admin');
    }

    // --- Proposals Collection ---
    // All authenticated users can read proposals for voting.
    // Only sellers can create proposals.
    // Only the proposer or an admin can update (e.g. status), but anyone can vote (which is an update).
    match /proposals/{proposalId} {
        allow read: if isAuth();
        allow create: if isRole('seller') && isOwner(request.resource.data.proposerId);
        allow update: if isAuth(); // Allows for voting (incrementing a field)
        allow delete: if isRole('admin');
    }

    // --- Documents Collection ---
    // Users can only create their own documents.
    // Owners and admins can read documents.
    match /documents/{documentId} {
        allow create: if isAuth() && isOwner(request.resource.data.ownerId);
        allow read: if isAuth() && (isOwner(resource.data.ownerId) || isRole('admin'));
        allow update: if isRole('admin'); // Only admins can approve/reject
        allow delete: if isRole('admin');
    }
  }
}
